#!/bin/bash

# PKB ÂΩìÂâçÈÉ®ÁΩ≤ÁéØÂ¢ÉÂ§á‰ªΩËÑöÊú¨
# Áî®‰∫éÂú®ËøÅÁßªÂâçÂàõÂª∫ÂÆâÂÖ®Â§á‰ªΩ

set -e

# È¢úËâ≤ÂÆö‰πâ
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ÈÖçÁΩÆ
CURRENT_DIR=$(pwd)
BACKUP_DIR="/opt/pkb-backup-$(date +%Y%m%d-%H%M%S)"

echo "======================================"
echo "    PKB ÁéØÂ¢ÉÂ§á‰ªΩËÑöÊú¨"
echo "======================================"
echo ""
log_info "ÂΩìÂâçÁõÆÂΩï: $CURRENT_DIR"
log_info "Â§á‰ªΩÁõÆÂΩï: $BACKUP_DIR"
echo ""

# Ê£ÄÊü•ÊùÉÈôê
if [ "$EUID" -ne 0 ]; then
    log_error "ËØ∑‰ΩøÁî® root ÊùÉÈôêËøêË°å: sudo $0"
    exit 1
fi

# ÂàõÂª∫Â§á‰ªΩÁõÆÂΩï
mkdir -p "$BACKUP_DIR"

log_info "ÂºÄÂßãÂ§á‰ªΩÂΩìÂâç PKB ÈÉ®ÁΩ≤ÁéØÂ¢É..."

# 1. Â§á‰ªΩÈÉ®ÁΩ≤Êñá‰ª∂
log_info "Â§á‰ªΩÈÉ®ÁΩ≤Êñá‰ª∂..."
cp -r "$CURRENT_DIR" "$BACKUP_DIR/deployment_files"
log_success "ÈÉ®ÁΩ≤Êñá‰ª∂Â§á‰ªΩÂÆåÊàê"

# 2. Â§á‰ªΩÊï∞ÊçÆÂ∫ì
log_info "Â§á‰ªΩÊï∞ÊçÆÂ∫ì..."
if docker ps | grep -q postgres; then
    POSTGRES_CONTAINER=$(docker ps --format "{{.Names}}" | grep postgres | head -1)
    log_info "ÂèëÁé∞ PostgreSQL ÂÆπÂô®: $POSTGRES_CONTAINER"
    
    # Â∞ùËØï‰∏çÂêåÁöÑÂ§á‰ªΩÊñπÂºè
    if docker exec "$POSTGRES_CONTAINER" pg_dumpall -U postgres > "$BACKUP_DIR/database_full.sql" 2>/dev/null; then
        log_success "ÂÆåÊï¥Êï∞ÊçÆÂ∫ìÂ§á‰ªΩÊàêÂäü"
    elif docker exec "$POSTGRES_CONTAINER" pg_dump -U pkb pkb > "$BACKUP_DIR/database_pkb.sql" 2>/dev/null; then
        log_success "PKB Êï∞ÊçÆÂ∫ìÂ§á‰ªΩÊàêÂäü"
    else
        log_warning "Ëá™Âä®Êï∞ÊçÆÂ∫ìÂ§á‰ªΩÂ§±Ë¥•ÔºåËØ∑ÊâãÂä®Â§á‰ªΩ"
    fi
else
    log_warning "Êú™ÂèëÁé∞ PostgreSQL ÂÆπÂô®"
fi

# 3. Â§á‰ªΩ Docker ‰ø°ÊÅØ
log_info "Â§á‰ªΩ Docker ÁéØÂ¢É‰ø°ÊÅØ..."
docker ps -a > "$BACKUP_DIR/docker_containers.txt"
docker images > "$BACKUP_DIR/docker_images.txt"
docker volume ls > "$BACKUP_DIR/docker_volumes.txt"
docker network ls > "$BACKUP_DIR/docker_networks.txt"

# 4. Â§á‰ªΩÁ≥ªÁªü‰ø°ÊÅØ
log_info "Â§á‰ªΩÁ≥ªÁªü‰ø°ÊÅØ..."
echo "Â§á‰ªΩÊó∂Èó¥: $(date)" > "$BACKUP_DIR/backup_info.txt"
echo "Â§á‰ªΩÁõÆÂΩï: $CURRENT_DIR" >> "$BACKUP_DIR/backup_info.txt"
echo "Á≥ªÁªü‰ø°ÊÅØ: $(uname -a)" >> "$BACKUP_DIR/backup_info.txt"
echo "Docker ÁâàÊú¨: $(docker --version)" >> "$BACKUP_DIR/backup_info.txt"

# 5. ÂàõÂª∫ÊÅ¢Â§çËÑöÊú¨
cat > "$BACKUP_DIR/restore.sh" << 'EOF'
#!/bin/bash
# PKB ÁéØÂ¢ÉÊÅ¢Â§çËÑöÊú¨

echo "PKB ÁéØÂ¢ÉÊÅ¢Â§çËÑöÊú¨"
echo "Â§á‰ªΩÊó∂Èó¥: $(cat backup_info.txt | grep "Â§á‰ªΩÊó∂Èó¥")"
echo ""

read -p "Á°ÆËÆ§ÊÅ¢Â§çÂà∞Â§á‰ªΩÁä∂ÊÄÅÔºüËøôÂ∞ÜË¶ÜÁõñÂΩìÂâçÈÉ®ÁΩ≤ (y/N): " confirm
if [[ ! $confirm =~ ^[Yy]$ ]]; then
    echo "ÊÅ¢Â§çÂ∑≤ÂèñÊ∂à"
    exit 0
fi

ORIGINAL_DIR=$(cat backup_info.txt | grep "Â§á‰ªΩÁõÆÂΩï" | cut -d: -f2 | xargs)

echo "ÂÅúÊ≠¢ÂΩìÂâçÊúçÂä°..."
docker-compose down 2>/dev/null || true

echo "ÊÅ¢Â§çÈÉ®ÁΩ≤Êñá‰ª∂..."
cp -r deployment_files/* "$ORIGINAL_DIR/"

echo "ÊÅ¢Â§çÊï∞ÊçÆÂ∫ì..."
if [ -f "database_full.sql" ]; then
    POSTGRES_CONTAINER=$(docker ps --format "{{.Names}}" | grep postgres | head -1)
    if [ -n "$POSTGRES_CONTAINER" ]; then
        docker exec -i "$POSTGRES_CONTAINER" psql -U postgres < database_full.sql
        echo "Êï∞ÊçÆÂ∫ìÊÅ¢Â§çÂÆåÊàê"
    fi
elif [ -f "database_pkb.sql" ]; then
    POSTGRES_CONTAINER=$(docker ps --format "{{.Names}}" | grep postgres | head -1)
    if [ -n "$POSTGRES_CONTAINER" ]; then
        docker exec -i "$POSTGRES_CONTAINER" psql -U pkb -d pkb < database_pkb.sql
        echo "PKB Êï∞ÊçÆÂ∫ìÊÅ¢Â§çÂÆåÊàê"
    fi
fi

echo "ÂêØÂä®ÊúçÂä°..."
cd "$ORIGINAL_DIR"
docker-compose up -d

echo "ÊÅ¢Â§çÂÆåÊàêÔºÅ"
EOF

chmod +x "$BACKUP_DIR/restore.sh"

# 6. ÂàõÂª∫Â§á‰ªΩËØ¥Êòé
cat > "$BACKUP_DIR/README.md" << EOF
# PKB ÁéØÂ¢ÉÂ§á‰ªΩ

## Â§á‰ªΩ‰ø°ÊÅØ
- Â§á‰ªΩÊó∂Èó¥: $(date)
- ÂéüÂßãÁõÆÂΩï: $CURRENT_DIR
- Â§á‰ªΩÁõÆÂΩï: $BACKUP_DIR

## Â§á‰ªΩÂÜÖÂÆπ
- \`deployment_files/\`: ÂÆåÊï¥ÁöÑÈÉ®ÁΩ≤Êñá‰ª∂ÂíåÈÖçÁΩÆ
- \`database_*.sql\`: Êï∞ÊçÆÂ∫ìÂ§á‰ªΩÊñá‰ª∂
- \`docker_*.txt\`: Docker ÁéØÂ¢É‰ø°ÊÅØ
- \`backup_info.txt\`: Â§á‰ªΩËØ¶ÁªÜ‰ø°ÊÅØ
- \`restore.sh\`: Ëá™Âä®ÊÅ¢Â§çËÑöÊú¨

## ÊÅ¢Â§çÊñπÊ≥ï

### ÊñπÊ≥ï‰∏ÄÔºö‰ΩøÁî®Ëá™Âä®ÊÅ¢Â§çËÑöÊú¨
\`\`\`bash
cd $BACKUP_DIR
sudo ./restore.sh
\`\`\`

### ÊñπÊ≥ï‰∫åÔºöÊâãÂä®ÊÅ¢Â§ç
1. ÂÅúÊ≠¢ÂΩìÂâçÊúçÂä°
   \`\`\`bash
   docker-compose down
   \`\`\`

2. ÊÅ¢Â§çÊñá‰ª∂
   \`\`\`bash
   cp -r $BACKUP_DIR/deployment_files/* $CURRENT_DIR/
   \`\`\`

3. ÊÅ¢Â§çÊï∞ÊçÆÂ∫ì
   \`\`\`bash
   # Â¶ÇÊûúÊúâÂÆåÊï¥Â§á‰ªΩ
   docker exec -i postgres_container psql -U postgres < $BACKUP_DIR/database_full.sql
   
   # ÊàñËÄÖ PKB Êï∞ÊçÆÂ∫ìÂ§á‰ªΩ
   docker exec -i postgres_container psql -U pkb -d pkb < $BACKUP_DIR/database_pkb.sql
   \`\`\`

4. ÂêØÂä®ÊúçÂä°
   \`\`\`bash
   cd $CURRENT_DIR
   docker-compose up -d
   \`\`\`

## Ê≥®ÊÑè‰∫ãÈ°π
- ÊÅ¢Â§çÂâçËØ∑Á°Æ‰øùÂÅúÊ≠¢ÊâÄÊúâÁõ∏ÂÖ≥ÊúçÂä°
- Êï∞ÊçÆÂ∫ìÊÅ¢Â§çÂèØËÉΩÈúÄË¶ÅÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµË∞ÉÊï¥Áî®Êà∑ÂêçÂíåÊï∞ÊçÆÂ∫ìÂêç
- Â¶ÇÊúâÈóÆÈ¢òÔºåËØ∑ÂèÇËÄÉ backup_info.txt ‰∏≠ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
EOF

log_success "üéâ Â§á‰ªΩÂÆåÊàêÔºÅ"
echo ""
echo "üìÅ Â§á‰ªΩ‰ΩçÁΩÆ: $BACKUP_DIR"
echo "üìã Â§á‰ªΩÂÜÖÂÆπ:"
echo "  ‚Ä¢ ÈÉ®ÁΩ≤Êñá‰ª∂: deployment_files/"
echo "  ‚Ä¢ Êï∞ÊçÆÂ∫ìÂ§á‰ªΩ: database_*.sql"
echo "  ‚Ä¢ Docker ‰ø°ÊÅØ: docker_*.txt"
echo "  ‚Ä¢ ÊÅ¢Â§çËÑöÊú¨: restore.sh"
echo "  ‚Ä¢ ËØ¥ÊòéÊñáÊ°£: README.md"
echo ""
echo "üîÑ ÊÅ¢Â§çÂëΩ‰ª§:"
echo "  cd $BACKUP_DIR && sudo ./restore.sh"
echo ""
log_info "Áé∞Âú®ÂèØ‰ª•ÂÆâÂÖ®Âú∞ËøõË°åËøÅÁßª‰∫ÜÔºÅ"
